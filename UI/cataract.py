# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Cataract.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image
from pathlib import Path
import numpy
import decimal

labels = ['cataract', 'diabetic_retinopathy', 'glaucoma', 'normal']
model = models.resnet34()
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, 4)
model.load_state_dict(torch.load("trained_model_gpu_4_class_res34_Adam_ext_2_mod_input_fin.pt"))
model.eval()
decimal.getcontext().prec = 5

transform = transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(256),
            transforms.ToTensor(),
            transforms.Normalize([0.4391, 0.2936, 0.1673], [0.1749, 0.1330, 0.0965])])

class Ui_CataractDetection(QMainWindow):

    def __init__(self):
        self.filePath = ''
        self.currentDir = os.getcwd()

    def setupUi(self, CataractDetection):
        self.window = CataractDetection
        CataractDetection.setObjectName("CataractDetection")
        CataractDetection.resize(698, 623)
        self.pushButton = QtWidgets.QPushButton(CataractDetection)
        self.pushButton.setGeometry(QtCore.QRect(60, 210, 101, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(CataractDetection)
        self.pushButton_2.setGeometry(QtCore.QRect(60, 170, 101, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(CataractDetection)
        self.label.setGeometry(QtCore.QRect(190, 390, 141, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(CataractDetection)
        self.label_2.setGeometry(QtCore.QRect(350, 390, 121, 21))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(CataractDetection)
        self.label_3.setGeometry(QtCore.QRect(190, 420, 141, 20))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(CataractDetection)
        self.label_4.setGeometry(QtCore.QRect(350, 420, 121, 21))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(CataractDetection)
        self.label_5.setGeometry(QtCore.QRect(160, 80, 361, 51))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(CataractDetection)
        self.label_6.setGeometry(QtCore.QRect(200, 140, 250, 250))
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")

        self.retranslateUi(CataractDetection)
        QtCore.QMetaObject.connectSlotsByName(CataractDetection)
        self.pushButton_2.clicked.connect(lambda: self.getFile())
        self.pushButton.clicked.connect(lambda: self.runClassifier())

    def retranslateUi(self, CataractDetection):
        _translate = QtCore.QCoreApplication.translate
        CataractDetection.setWindowTitle(_translate("CataractDetection", "Form"))
        self.pushButton.setText(_translate("CataractDetection", "Check"))
        self.pushButton_2.setText(_translate("CataractDetection", "Choose"))
        self.label.setText(_translate("CataractDetection", "Prediction Confidence :"))
        self.label_3.setText(_translate("CataractDetection", "Type :"))
        self.label_5.setText(_translate("CataractDetection", "                              Eye Disease Detection"))
    
    def getFile(self):
        self.filePath, _ = QFileDialog.getOpenFileName(self.window, 'Choose an image', "${HOME}", "Formats: (*.jpg *.jpeg)")
        image_disp = QtGui.QImage(self.filePath) #QImage object
        image_disp = image_disp.scaled(250,250, aspectRatioMode=QtCore.Qt.KeepAspectRatio, transformMode=QtCore.Qt.SmoothTransformation)   
        self.label_6.setPixmap(QtGui.QPixmap.fromImage(image_disp))

    def runClassifier(self):
        input = Image.open(Path(self.filePath))
        input = transform(input)
        output = model(torch.unsqueeze(input,0))
        sm = torch.nn.Softmax(dim=1)
        probabilities = sm(output) 
        num_arr = probabilities.detach().numpy()
        max_index = numpy.argmax(num_arr)
        #self.label_2.setText(str(decimal.Decimal(str(numpy.amax(num_arr)*100))*1)+" %")
        self.label_2.setText( "{:.3f} %".format(numpy.amax(num_arr).item()*100))
        if (max_index == 0):
            self.label_4.setText("Cataract")
        elif(max_index == 1):
            self.label_4.setText("Diabetic retinopathy")
        elif(max_index == 2):
            self.label_4.setText("Glaucoma")
        elif(max_index == 3):
            self.label_4.setText("Normal")
        


        

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    CataractDetection = QtWidgets.QWidget()
    ui = Ui_CataractDetection()
    ui.setupUi(CataractDetection)
    CataractDetection.show()
    sys.exit(app.exec_())
